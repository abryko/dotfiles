#zmodload zsh/zprof

if [[ $TILIX_ID ]]; then
    source /etc/profile.d/vte.sh
fi


export SHELL=zsh
export DIRENV_WARN_TIMEOUT=40s
export ZLE_RPROMPT_INDENT=0
export ZSH_DISABLE_COMPFIX=true
export CASE_SENSITIVE="true"
export ZSH_AUTOSUGGEST_BUFFER_MAX_SIZE=200
export ZSH_AUTOSUGGEST_MANUAL_REBIND=1  # make prompt faster
export DISABLE_MAGIC_FUNCTIONS=true     # make pasting into terminal faster
# export ZSH_AUTOSUGGEST_USE_ASYNC=1


### Added by Zinit's installer
if [[ ! -f $HOME/.zinit/bin/zinit.zsh ]]; then
    print -P "%F{33}▓▒░ %F{220}Installing DHARMA Initiative Plugin Manager (zdharma-continuum/zinit)…%f"
    command mkdir -p "$HOME/.zinit" && command chmod g-rwX "$HOME/.zinit"
    command git clone https://github.com/zdharma-continuum/zinit.git "$HOME/.zinit/bin" && \
        print -P "%F{33}▓▒░ %F{34}Installation successful.%f%b" || \
        print -P "%F{160}▓▒░ The clone has failed.%f%b"
fi

source "$HOME/.zinit/bin/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit

## Load a few important annexes, without Turbo
## (this is currently required for annexes)
#zinit light-mode for \
#    zinit-zsh/z-a-patch-dl \
#    zinit-zsh/z-a-as-monitor \
#    zinit-zsh/z-a-bin-gem-node


# Do not load these in turbo
zinit lucid light-mode for \
    OMZL::completion.zsh \
    OMZL::key-bindings.zsh \
    OMZL::spectrum.zsh \
    has'fzf' OMZP::fzf \
    OMZL::history.zsh \
    OMZL::directories.zsh \
    romkatv/zsh-defer

zinit lucid light-mode has'atuin' for @ellie/atuin

autoload compinit; compinit -C;

# fzf-tab: has to be loaded as soon as possible
zinit lucid light-mode for depth'1' blockf has'fzf' @Aloxaf/fzf-tab


# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi


# Primary stuffs
zinit lucid light-mode for \
    @rupa/z \
    pick'fasd' \
        atclone'./fasd --init zsh-hook zsh-ccomp zsh-ccomp-install zsh-wcomp zsh-wcomp-install > script.zsh' \
        atpull'%atclone' run-atpull src'script.zsh' depth'1' \
        @clvv/fasd \
    depth'1' has'fzf' \
        @changyuheng/fz \
    depth'1' if'[[ $PATH != *asdf/bin* ]]' \
        @asdf-vm/asdf


# Direnv
zinit lucid light-mode id-as'direnv' \
    atclone'direnv hook zsh > zhook.zsh' \
    atpull'%atclone' run-atpull pick'zhook.zsh' nocompile \
    has'direnv' for zdharma-continuum/null

# Highlights

zinit lucid light-mode for OMZP::sudo/sudo.plugin.zsh

zinit lucid light-mode for @zsh-users/zsh-autosuggestions

zinit lucid light-mode for \
    blockf atclone'zinit creinstall -q zsh-users/zsh-completions' atpull'%atclone' \
        @zsh-users/zsh-completions

# ZLE Bindings
[[ -r ~/.zsh_zle ]] && source ~/.zsh_zle

# todo.txt
zinit depth'1' lucid light-mode pick'todo_completion' for \
    has'todo.sh' todotxt/todo.txt-cli

# Completions
zinit lucid light-mode for \
    OMZP::cp \
    OMZP::systemd \
    has'vagrant' as'completion' OMZP::vagrant/_vagrant \
    has'docker-compose' as'completion' OMZP::docker-compose/_docker-compose \
    has'terraform' OMZP::terraform \
    has'vault' as'completion' OMZP::vault/_vault \
    has'docker-compose' OMZP::docker-compose \
    has'pip' as'completion' OMZP::pip/_pip \
    has'pip' OMZP::pip \
    OMZP::colored-man-pages \
    has'nix' depth=1 chisui/zsh-nix-shell \
    has'curl' depth=1 as'completion' atclone'scripts/completion.pl --shell zsh > _curl' atpull'%atclone' run-atpull nocompile curl/curl \
    OMZP::command-not-found

# docker-completion
zinit lucid light-mode as'completion' id-as'docker-completion' \
    atclone'docker completion zsh > _docker' \
    atpull'%atclone' run-atpull nocompile \
    has'docker' for zdharma-continuum/null

# gopass-completion
zinit lucid light-mode id-as'gopass-completion' \
    atclone'gopass completion bash > script.zsh' \
    atpull'%atclone' run-atpull nocompile \
    has'gopass' for zdharma-continuum/null

# fly-completion
zinit lucid light-mode id-as'fly-completion' \
    atclone'fly completion --shell bash > script.zsh' \
    atpull'%atclone' run-atpull pick'script.zsh' nocompile \
    has'fly' for zdharma-continuum/null

# bitwarden-completion
zinit lucid light-mode as'completion' id-as'bitwarden-completion' \
    atclone'bw completion --shell zsh > _bw' \
    atpull'%atclone' run-atpull nocompile \
    has'bw' for zdharma-continuum/null

# kind-completion
zinit lucid light-mode as'completion' id-as'kind-completion' \
    atclone'kind completion zsh > _kind' \
    atpull'%atclone' run-atpull nocompile \
    has'kind' for zdharma-continuum/null

# velero-completion
zinit lucid light-mode as'completion' id-as'velero-completion' \
    atclone'velero completion zsh > _velero' \
    atpull'%atclone' run-atpull nocompile \
    has'velero' for zdharma-continuum/null

# minikube-completion
zinit lucid light-mode as'completion' id-as'minikube-completion' \
    atclone'minikube completion zsh > _minikube' \
    atpull'%atclone' run-atpull nocompile \
    has'minikube' for zdharma-continuum/null

# aws-completion
zinit lucid light-mode as'completion' id-as'aws-completion' \
    atload'complete -C "aws_completer" aws' nocompile \
    has'aws' for zdharma-continuum/null

# Fetching config from local zsh installation
zinit lucid light-mode id-as'zsh-default-completions' \
    atclone'find /usr/share/zsh/vendor-completions -name "_*" -exec install -m 0644 -t . {} \+' \
    atpull'%atclone' run-atpull nocompile \
    has'nix' for zdharma-continuum/null

# Bunch of completions from nix installed packages in case they are missing
zinit lucid light-mode id-as'completions' \
    atclone'find ~/.nix-profile/share -name "_*" -exec install -m 0644 -t . {} \+' \
    atpull'%atclone' run-atpull nocompile \
    has'nix' for zdharma-continuum/null

# nix additional completions
zinit lucid light-mode for depth=1 has'nix' spwhitt/nix-zsh-completions


# Replay all compdef
# Fix insecure directories when sudo https://github.com/zdharma-continuum/zinit/issues/357
#[ -n "$SUDO_UID" ] && fpath=(${fpath[@]/$ZINIT[HOME_DIR]*})
zinit lucid light-mode as'null' id-as'compdef-replay' \
    atload'zicdreplay' for zdharma-continuum/null

# THEME
zinit depth=1 light-mode for romkatv/powerlevel10k

# Load fast-syntax-highlighting after p10k
zinit lucid light-mode for @zdharma-continuum/fast-syntax-highlighting

# Default editor
export EDITOR=vim
export SUDO_EDITOR=vim

# Load add-zsh-hook
autoload -Uz add-zsh-hook
function zellij_rename_tab_on_cd() {
    [ -n "$ZELLIJ" ] && zsh-defer zellij action rename-tab "${PWD//${HOME}/~}"
}
add-zsh-hook chpwd zellij_rename_tab_on_cd
# Call it immediately
zellij_rename_tab_on_cd

# Additional files to source
[[ -r ~/.zsh_functions ]] && source ~/.zsh_functions
export GPG_TTY=$(tty)

## Colored man pages (color codes uses OMZL::spectrum)
# bold text: red
less_termcap[md]="$(print -P -- ${FX[bold]}${FG[009]})"
# blink text: yellow
less_termcap[mb]="$(print -P -- ${FX[blink]}${FG[226]})"
# underlined text: orange
less_termcap[us]="$(print -P -- ${FX[underline]}${FG[208]})"
# reset
less_termcap[me]="$(print -P -- ${FX[reset]})"
less_termcap[ue]="$(print -P -- ${FX[reset]})"

# History
HISTFILE="$HOME/.zhistory"
HISTSIZE=60000
SAVEHIST=50000

setopt BANG_HIST                 # Treat the '!' character specially during expansion.
setopt EXTENDED_HISTORY          # Write the history file in the ":start:elapsed;command" format.
setopt INC_APPEND_HISTORY        # Write to the history file immediately, not when the shell exits.
setopt SHARE_HISTORY             # Share history between all sessions.
setopt HIST_EXPIRE_DUPS_FIRST    # Expire duplicate entries first when trimming history.
setopt HIST_IGNORE_DUPS          # Don't record an entry that was just recorded again.
setopt HIST_IGNORE_ALL_DUPS      # Delete old recorded entry if new entry is a duplicate.
setopt HIST_FIND_NO_DUPS         # Do not display a line previously found.
setopt HIST_IGNORE_SPACE         # Don't record an entry starting with a space.
setopt HIST_SAVE_NO_DUPS         # Don't write duplicate entries in the history file.
setopt HIST_REDUCE_BLANKS        # Remove superfluous blanks before recording entry.
setopt HIST_VERIFY               # Don't execute immediately upon history expansion.
setopt HIST_BEEP                 # Beep when accessing nonexistent history.

# Comments in shell
setopt interactivecomments

# Disable autocd
unsetopt autocd


# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh
#zprof
