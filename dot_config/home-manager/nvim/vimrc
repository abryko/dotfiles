" GENERAL SETTINGS
" Map leader to spacebar
let mapleader = "\<Space>"

" configure listchars
set listchars=eol:¬,tab:>·,trail:~,extends:>,precedes:<,space:␣

" Line number
set number
set relativenumber

" No insert mode while using mouse
set mouse=r

" Indentation Defaults
set tabstop=4
set shiftwidth=4
set softtabstop=2
set smarttab

" Search ignorecase
set ignorecase
set smartcase

" ONLY When running vscode
if exists('g:vscode')
    " VSCode extension
    nnoremap <silent> gh <cmd>call VSCodeNotify('editor.action.showHover')<CR>
    nnoremap <silent> gy <cmd>call VSCodeNotify('editor.action.goToTypeDefinition')<CR>
    nnoremap <silent> gd <cmd>call VSCodeNotify('editor.action.revealDefinition')<CR>
    nnoremap <silent> gi <cmd>call VSCodeNotify('editor.action.goToImplementation')<CR>
    nnoremap <silent> gr <cmd>call VSCodeNotify('editor.action.goToReferences')<CR>

    nnoremap <silent> [g <cmd>call VSCodeNotify('editor.action.marker.prevInFiles')<CR>
    nnoremap <silent> ]g <cmd>call VSCodeNotify('editor.action.marker.nextInFiles')<CR>

    nnoremap <silent> <leader>ff <cmd>call VSCodeNotify('workbench.action.quickOpen')<CR>
    nnoremap <silent> <leader>fg <cmd>call VSCodeNotify('workbench.action.findInFiles')<CR>

    nnoremap <silent> <leader>o <cmd>call VSCodeNotify('workbench.action.gotoSymbol')<CR>
    nnoremap <silent> <leader>s <cmd>call VSCodeNotify('workbench.action.showAllSymbols')<CR>

    nnoremap <silent> <leader>qf <cmd>call VSCodeNotify('editor.action.quickFix')<CR>
    nnoremap <silent> <leader>ac <cmd>call VSCodeNotify('editor.action.quickFix')<CR>


else

" colorscheme
colorscheme tokyonight-night
highlight Normal guifg=#cccccc guibg=#000000 gui=NONE cterm=NONE

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
set signcolumn=yes


" GoTo code navigation.
nmap <silent> gd  <cmd>Telescope lsp_definitions<cr>
nmap <silent> gy  <cmd>Telescope lsp_type_definitions<cr>
nmap <silent> gi  <cmd>Telescope lsp_implementations<cr>
nmap <silent> gr  <cmd>Telescope lsp_references<cr>

" " Use K to show documentation in preview window.
nnoremap <silent> gh <cmd>lua vim.lsp.buf.hover()<cr>
nnoremap <silent> K <cmd>lua vim.lsp.buf.hover()<cr>

" Symbol renaming.
nmap <leader>rn <cmd>lua vim.lsp.buf.rename()<cr>
nmap <F2> <cmd>lua vim.lsp.buf.rename()<cr>

" Formatting selected code.
xmap <leader>f= <cmd>lua vim.lsp.buf.format()<cr>
xmap <leader>= <cmd>lua vim.lsp.buf.format()<cr>
nmap <leader>f= <cmd>lua vim.lsp.buf.format()<cr>
nmap <leader>= <cmd>lua vim.lsp.buf.format()<cr>

" Remap keys for apply code actions at the cursor position.
nmap <leader>ac <cmd>lua vim.lsp.buf.code_action()<cr>
xmap <leader>ac <cmd>lua vim.lsp.buf.code_action()<cr>
" Apply the most preferred quickfix action to fix diagnostic on the current line.
nmap <leader>qf <cmd>lua vim.lsp.buf.code_action({only = 'quickfix'})<cr>

" Remap keys for apply refactor code actions.
nmap <silent> <leader>re <cmd>lua vim.lsp.buf.code_action({only = 'refactor'})<cr>
nmap <silent> <leader>r <cmd>lua vim.lsp.buf.code_action({only = 'refactor'})<cr>
xmap <silent> <leader>r <cmd>lua vim.lsp.buf.code_action({only = 'refactor'})<cr>

" Run the Code Lens action on the current line.
nmap <leader>cl <cmd>lua vim.lsp.codelens.run()<cr>


" Find diagnotics
nnoremap <silent> [g <cmd>lua vim.diagnostic.goto_prev()<cr>
nnoremap <silent> ]g <cmd>lua vim.diagnostic.goto_next()<cr>
nnoremap <silent><nowait> <leader>fa  <cmd>Telescope diagnostics<cr>
" Find symbol of current document.
nnoremap <silent><nowait> <leader>o  <cmd>Telescope lsp_document_symbols<cr>
" Search workspace symbols.
nnoremap <silent><nowait> <leader>s  <cmd>Telescope lsp_dynamic_workspace_symbols<cr>


" Telescope mappings
nnoremap <silent><leader>f. <cmd>Telescope resume<cr>
nnoremap <silent><leader>f/ <cmd>Telescope current_buffer_fuzzy_find<cr>
nnoremap <silent><leader>ff <cmd>Telescope find_files<cr>
nnoremap <silent><leader>fF <cmd>Telescope grep_string search="" only_sort_text=true<cr>
nnoremap <silent><C-p> <cmd>Telescope find_files<cr>
nnoremap <silent><leader>fg <cmd>Telescope live_grep<cr>
nnoremap <silent><leader>fG <cmd>Telescope grep_string<cr>
nnoremap <silent><leader>fb <cmd>Telescope buffers<cr>
nnoremap <silent><leader>fh <cmd>Telescope help_tags<cr>
nnoremap <silent><leader>fr <cmd>Telescope registers<cr>
nnoremap <silent><leader>fm <cmd>Telescope marks<cr>
nnoremap <silent><leader>fo <cmd>Telescope lsp_document_symbols<cr>
nnoremap <silent><leader>fs <cmd>Telescope lsp_dynamic_workspace_symbols<cr>
nnoremap <silent><leader>fq <cmd>Telescope lsp_dynamic_workspace_symbols<cr>

lua << END
vim.opt.termguicolors = true,
-- auto-format on save
-- vim.cmd [[autocmd BufWritePre * lua vim.lsp.buf.format()]]

require('lualine').setup({
  options = {
    icons_enabled = true,
    theme = 'tokyonight',
    component_separators = { left = '', right = ''},
    section_separators = { left = '', right = ''},
    disabled_filetypes = {
      statusline = {},
      winbar = {},
    },
    ignore_focus = {},
    always_divide_middle = true,
    globalstatus = false,
    refresh = {
      statusline = 1000,
      tabline = 1000,
      winbar = 1000,
    }
  },
  sections = {
    lualine_a = {'mode'},
    lualine_b = {'branch', 'diff', 'diagnostics'},
    lualine_c = {{'filename', path=1, shorting_target = 39}},
    lualine_x = {
      {
        require("noice").api.status.message.get_hl,
        cond = require("noice").api.status.message.has,
      },
      {
        require("noice").api.status.command.get,
        cond = require("noice").api.status.command.has,
        color = { fg = "#ff9e64" },
      },
      {
        require("noice").api.status.search.get,
        cond = require("noice").api.status.search.has,
        color = { fg = "#ff9e64" },
      },
      'encoding',
      'fileformat',
      'filetype',
    },
    lualine_y = {'progress'},
    lualine_z = {'location'}
  },
  inactive_sections = {
    lualine_a = {},
    lualine_b = {},
    lualine_c = {'filename'},
    lualine_x = {'location'},
    lualine_y = {},
    lualine_z = {}
  },
  tabline = {},
  winbar = {},
  inactive_winbar = {},
  extensions = {}
})

require('Comment').setup()

require("telescope").setup({
  defaults = {
    mappings = {
      i = {
        ["<C-b>"] = "preview_scrolling_up",
        ["<C-f>"] = "preview_scrolling_down",
      },
      n = {
        ["<C-b>"] = "preview_scrolling_up",
        ["<C-f>"] = "preview_scrolling_down",
      },
    },
    layout_strategy = "vertical",
    sorting_strategy = "ascending",
    layout_config = {
        preview_cutoff = 1,
      vertical = { width = 0.8 }
    },
    border = true,
  },
  extensions = {
    fzf = {
      fuzzy = true,                    -- false will only do exact matching
      override_generic_sorter = true,  -- override the generic sorter
      override_file_sorter = true,     -- override the file sorter
      case_mode = "smart_case",        -- or "ignore_case" or "respect_case"
                                       -- the default case_mode is "smart_case"
    },
    extensions = {
      ["ui-select"] = {
        require("telescope.themes").get_dropdown {
        -- even more opts
        },
      },
      -- pseudo code / specification for writing custom displays, like the one
      -- for "codeactions"
      -- specific_opts = {
      --   [kind] = {
      --     make_indexed = function(items) -> indexed_items, width,
      --     make_displayer = function(widths) -> displayer
      --     make_display = function(displayer) -> function(e)
      --     make_ordinal = function(e) -> string
      --   },
      --   -- for example to disable the custom builtin "codeactions" display
      --      do the following
      --   codeactions = false,
      -- }
    },
  },
})
require('telescope').load_extension('fzf')
require("telescope").load_extension("ui-select")

require('nvim-treesitter.configs').setup({
  highlight = {
    enable = true,
  },
  additional_vim_regex_highlighting = false,
  textobjects = {
    select = {
      enable = true,
      keymaps = {
        ["af"] = "@function.outer",
        ["if"] = "@function.inner",
        ["ac"] = "@class.outer",
        ["ic"] = "@class.inner",
        ["ib"] = "@block.inner",
        ["ab"] = "@block.outer",
        ["ap"] = "@parameter.outer",
        ["ip"] = "@parameter.inner",
      },
      selection_modes = {
        ['@parameter.outer'] = 'v', -- charwise
        ['@function.outer'] = 'V', -- linewise
        ['@block.outer'] = '<c-v>', -- blockwise
      },
    },
    swap = {
      enable = true,
      swap_next = {
      },
      swap_previous = {
      },
    },
    move = {
      enable = true,
      set_jumps = true,
      goto_next_start = {
        ["]b"] = "@block.outer",
        ["]c"] = { query = "@class.outer", desc = "Next class start" },
        ["]d"] = "@conditional.outer",
        ["]f"] = "@function.outer",
        ["]m"] = "@function.outer",
        ["]p"] = "@parameter.inner",
        ["]s"] = { query = "@scope", query_group = "locals", desc = "Next scope" },
        ["]z"] = { query = "@fold", query_group = "folds", desc = "Next fold" },
      },
      goto_next_end = {
        ["]B"] = "@block.outer",
        ["]C"] = "@class.outer",
        ["]D"] = "@conditional.outer",
        ["]F"] = "@function.outer",
        ["]M"] = "@function.outer",
        ["]P"] = "@parameter.outer",
      },
      goto_previous_start = {
        ["[["] = "@class.outer",
        ["[b"] = "@block.outer",
        ["[c"] = "@class.outer",
        ["[d"] = "@conditional.outer",
        ["[f"] = "@function.outer",
        ["[m"] = "@function.outer",
        ["[p"] = "@parameter.inner",
      },
      goto_previous_end = {
        ["[B"] = "@block.outer",
        ["[C"] = "@class.outer",
        ["[D"] = "@conditional.outer",
        ["[F"] = "@function.outer",
        ["[M"] = "@function.outer",
        ["[P"] = "@parameter.outer",
        ["[]"] = "@class.outer",
      },
      -- Below will go to either the start or the end, whichever is closer.
      -- Use if you want more granular movements
      -- Make it even more gradual by adding multiple queries and regex.
      goto_next = {
      },
      goto_previous = {
      }
    },
  },
})

require('treesitter-context').setup({
  enable = true,
  max_lines = 0,
  min_window_height = 0,
  line_numbers = true,
  multiline_threshold = 20,
  trim_scope = 'outer',
  mode = 'cursor',
  separator = nil,
  zindex = 20,
  on_attach = nil,
})

local luasnip = require('luasnip')
local cmp = require('cmp')

local jump_to_next_item = cmp.mapping(function(fallback)
    if cmp.visible() then
      cmp.select_next_item()
    elseif luasnip.expand_or_jumpable() then
      luasnip.expand_or_jump()
    else
      fallback()
    end
  end, { 'i', 's', 'c' })
local jump_to_previous_item = cmp.mapping(function(fallback)
    if cmp.visible() then
      cmp.select_prev_item()
    elseif luasnip.jumpable(-1) then
      luasnip.jump(-1)
    else
      fallback()
    end
  end, { 'i', 's', 'c' })

cmp.setup({
  enabled = true,
  view = {
    entries = "custom",
  },
  snippet = {
    -- REQUIRED - you must specify a snippet engine
    expand = function(args)
      require('luasnip').lsp_expand(args.body) -- For `luasnip` users.
    end,
  },
  window = {
    completion = cmp.config.window.bordered(),
    documentation = cmp.config.window.bordered(),
  },
  preselect = cmp.PreselectMode.None,
  mapping = cmp.mapping.preset.insert({
    ['<C-b>'] = cmp.mapping.scroll_docs(-4),
    ['<C-f>'] = cmp.mapping.scroll_docs(4),
    ['<C-Space>'] = cmp.mapping.complete(),
    ['<C-e>'] = cmp.mapping.abort(),
    ['<CR>'] = cmp.mapping.confirm({ select = false }), -- Accept currently selected item. Set `select` to `false` to only confirm explicitly selected items.
    ['<S-Tab>'] = jump_to_previous_item,
    ['<Tab>'] = jump_to_next_item,
  }),
  sources = cmp.config.sources({
    { name = 'nvim_lsp' },
    { name = 'treesitter' },
    { name = 'luasnip' }, -- For luasnip users.
    { name = 'nvim_lua' },
    { name = 'fuzzy_buffer' },
    { name = 'path' },
  }),
  completion =  {
    completeopt = 'menu,menuone,noselect',
  },
})

-- Use buffer source for `/` and `?` (if you enabled `native_menu`, this won't work anymore).
cmp.setup.cmdline({ '/', '?' }, {
  mapping = cmp.mapping.preset.cmdline(),
  sources = {
    -- { name = 'cmdline_history' },
    { name = 'nvim_lsp_document_symbol' },
    { name = 'fuzzy_buffer' },
  }
})

-- Use cmdline & path source for ':' (if you enabled `native_menu`, this won't work anymore).
cmp.setup.cmdline(':', {
  mapping = cmp.mapping.preset.cmdline(),
  sources = cmp.config.sources({
    -- { name = 'cmdline_history' },
    { name = 'path' },
    { name = 'cmdline', option = { ignore_cmds = { 'Man', '!' }}},
  }),
})

-- Set up lspconfig.
-- local capabilities = require('cmp_nvim_lsp').default_capabilities()
local capabilities = vim.lsp.protocol.make_client_capabilities()
local lspconfig = require('lspconfig')
-- bash
lspconfig.bashls.setup ({
  capabilities = capabilities,
})
-- c cpp
lspconfig.ccls.setup ({
  capabilities = capabilities,
})
-- cuelang
lspconfig.dagger.setup ({
  capabilities = capabilities,
})
-- deno
lspconfig.denols.setup ({
  capabilities = capabilities,
  init_options = {
    enable = true,
    lint = true,
    unstable = true,
  },
})
-- Linters integration
lspconfig.diagnosticls.setup ({
  capabilities = capabilities,
  filetypes = { 'markdown', 'sh' },
  init_options = {
    formatFiletypes = {
      sh = 'shfmt',
      markdown = 'mdformat',
    },
    formatters = {
      shfmt = {
        command = 'shfmt',
        args = {'-i', '2', '-bn', '-ci', '-sr'},
      },
      mdformat = {
        command = 'mdformat',
        args = { '-' },
      },
    },
  },
})
-- golang
lspconfig.gopls.setup ({
  capabilities = capabilities,
})
-- golangci-lint
lspconfig.golangci_lint_ls.setup{
  capabilities = capabilities,
}
-- spellcheck (latex, markdown)
lspconfig.ltex.setup{
  capabilities = capabilities,
  filetypes = { 'markdown' },
  on_attach = function(client, bufnr)
    -- rest of your on_attach process.
    require("ltex_extra").setup {
      load_langs = { "en-US", "fr" },
      init_check = true,
      path = (lspconfig.util.find_git_ancestor(vim.api.nvim_buf_get_name(0)) or '.') .. "/.ltex/",
    }
  end,
  settings = {
    ltex = {
      -- language = "auto",
      language = "en-US",
      additionalRules = {
        motherTongue = "fr",
      },
    },
  },
}
-- haskell
lspconfig.hls.setup{
  capabilities = capabilities,
  filetypes = { 'haskell', 'lhaskell', 'cabal' },
}
-- lua
lspconfig.lua_ls.setup ({
  capabilities = capabilities,
  settings = {
    Lua = {
      runtime = {
        -- Tell the language server which version of Lua you're using (most likely LuaJIT in the case of Neovim)
        version = 'LuaJIT',
      },
      diagnostics = {
        -- Get the language server to recognize the `vim` global
        globals = {'vim'},
      },
      workspace = {
        -- Make the server aware of Neovim runtime files
        library = vim.api.nvim_get_runtime_file("", true),
        checkThirdParty = false,
      },
      -- Do not send telemetry data containing a randomized but unique identifier
      telemetry = {
        enable = false,
     },
    },
  },
})
-- markdown
require'lspconfig'.marksman.setup{
  capabilities = capabilities,
}
-- nix
lspconfig.nil_ls.setup ({
  capabilities = capabilities,
  settings = {
    ['nil'] = {
      formatting = {
        command = {'alejandra'},
      },
      nix = {
        flake = {
          autoArchive = true,
        },
      },
    },
  },
})
-- nickel
lspconfig.nickel_ls.setup ({
  capabilities = capabilities,
})
-- -- nix
-- lspconfig.nixd.setup ({
--   capabilities = capabilities,
-- })
-- rust
lspconfig.rust_analyzer.setup ({
  capabilities = capabilities,
})
-- vimscript
lspconfig.vimls.setup ({
  capabilities = capabilities,
})

require('noice').setup({
  lsp = {
    enabled = true,
    -- override markdown rendering so that **cmp** and other plugins use **Treesitter**
    override = {
      ["vim.lsp.util.convert_input_to_markdown_lines"] = true,
      ["vim.lsp.util.stylize_markdown"] = true,
      ["cmp.entry.get_documentation"] = true,
    },
  },
  -- you can enable a preset for easier configuration
  presets = {
    bottom_search = false,
    command_palette = false, -- position the cmdline and popupmenu together
    long_message_to_split = true, -- long messages will be sent to a split
    inc_rename = false, -- enables an input dialog for inc-rename.nvim
    lsp_doc_border = true, -- add a border to hover docs and signature help
  },
  popupmenu = {
    backend = "cmp",
    -- backend = "nui",
  },
})
require("telescope").load_extension("noice")

vim.keymap.set("c", "<M-Enter>", function()
    require("noice").redirect(vim.fn.getcmdline())
  end, { desc = "Redirect Cmdline" })

vim.keymap.set({"n", "i", "s"}, "<c-f>", function()
    if not require("noice.lsp").scroll(4) then
      return "<c-f>"
    end
  end, { silent = true, expr = true })

vim.keymap.set({"n", "i", "s"}, "<c-b>", function()
    if not require("noice.lsp").scroll(-4) then
      return "<c-b>"
    end
  end, { silent = true, expr = true })

vim.keymap.set({"n", "i", "s"}, "", function()
    if not require("noice.lsp.docs").on_close() then
      return ""
    end
  end, { silent = true, expr = true })

END

endif
