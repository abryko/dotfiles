" GENERAL SETTINGS
" Map leader to spacebar
let mapleader = "\<Space>"

" configure listchars
set listchars=eol:¬,tab:>·,trail:~,extends:>,precedes:<,space:␣

" Line number
set number
set relativenumber

" No insert mode while using mouse
set mouse=r

" Indentation Defaults
set tabstop=4
set shiftwidth=4
set softtabstop=2
set smarttab

" Search ignorecase
set ignorecase
set smartcase

" May need for vim (not neovim) since coc.nvim calculate byte offset by count
" utf-8 byte sequence.
set encoding=utf-8
" Some servers have issues with backup files, see #649.
set nobackup
set nowritebackup

" ONLY When running vscode
if exists('g:vscode')
    " VSCode extension
    nnoremap <silent> gh :<C-u>call VSCodeNotify('editor.action.showHover')<CR>
    nnoremap <silent> gy :<C-u>call VSCodeNotify('editor.action.goToTypeDefinition')<CR>
    nnoremap <silent> gd :<C-u>call VSCodeNotify('editor.action.revealDefinition')<CR>
    nnoremap <silent> gi :<C-u>call VSCodeNotify('editor.action.goToImplementation')<CR>
    nnoremap <silent> gr :<C-u>call VSCodeNotify('editor.action.goToReferences')<CR>

    nnoremap <silent> [g :<C-u>call VSCodeNotify('editor.action.marker.prevInFiles')<CR>
    nnoremap <silent> ]g :<C-u>call VSCodeNotify('editor.action.marker.nextInFiles')<CR>

    nnoremap <silent> <leader>ff :<C-u>call VSCodeNotify('workbench.action.quickOpen')<CR>
    nnoremap <silent> <leader>fg :<C-u>call VSCodeNotify('workbench.action.findInFiles')<CR>

    nnoremap <silent> <leader>o :<C-u>call VSCodeNotify('workbench.action.gotoSymbol')<CR>
    nnoremap <silent> <leader>s :<C-u>call VSCodeNotify('workbench.action.showAllSymbols')<CR>

    nnoremap <silent> <leader>qf :<C-u>call VSCodeNotify('editor.action.quickFix')<CR>
    nnoremap <silent> <leader>ac :<C-u>call VSCodeNotify('editor.action.quickFix')<CR>


else

" colorscheme
colorscheme torte

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: There's always complete item selected by default, you may want to enable
" no select by `"suggest.noselect": true` in your configuration file.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ coc#pum#visible() ? coc#pum#next(1) :
      \ CheckBackspace() ? "\<Tab>" :
      \ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

" Make <CR> to accept selected completion item or notify coc.nvim to format
" <C-g>u breaks current undo, please make your own choice.
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd  <cmd>Telescope coc definitions<cr>
" nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy  <cmd>Telescope coc type_definitions<cr>
" nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi  <cmd>Telescope coc implementations<cr>
" nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr  <cmd>Telescope coc references<cr>
" nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> gh :call ShowDocumentation()<CR>
nnoremap <silent> K :call ShowDocumentation()<CR>

function! ShowDocumentation()
  if CocAction('hasProvider', 'hover')
    call CocActionAsync('doHover')
  else
    call feedkeys('K', 'in')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)
nmap <F2> <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying code actions to the selected code block.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for apply code actions at the cursor position.
nmap <leader>ac  <Plug>(coc-codeaction-cursor)
" Remap keys for apply code actions affect whole buffer.
nmap <leader>as  <Plug>(coc-codeaction-source)
" Apply the most preferred quickfix action to fix diagnostic on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Remap keys for apply refactor code actions.
nmap <silent> <leader>re <Plug>(coc-codeaction-refactor)
xmap <silent> <leader>r  <Plug>(coc-codeaction-refactor-selected)
nmap <silent> <leader>r  <Plug>(coc-codeaction-refactor-selected)

" Run the Code Lens action on the current line.
nmap <leader>cl  <Plug>(coc-codelens-action)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Remap <C-f> and <C-b> for scroll float windows/popups.
if has('nvim-0.4.0') || has('patch-8.2.0750')
  nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
  inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
  vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
endif

" Use CTRL-S for selections ranges.
" Requires 'textDocument/selectionRange' support of language server.
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocActionAsync('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocActionAsync('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Mappings for CoCList
" Show all diagnostics.
nnoremap <silent><nowait> <leader>a  :<C-u>Telescope coc diagnostics<cr>
nnoremap <silent><nowait> <leader>fa  :<C-u>Telescope coc workspace_diagnostics<cr>
" Manage extensions.
nnoremap <silent><nowait> <leader>e  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent><nowait> <leader>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent><nowait> <leader>o  <cmd>Telescope coc document_symbols<cr>
" Search workspace symbols.
nnoremap <silent><nowait> <leader>s  <cmd>Telescope coc workspace_symbols<cr>
" Do default action for next item.
nnoremap <silent><nowait> <leader>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent><nowait> <leader>k  :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent><nowait> <leader>p  :<C-u>CocListResume<CR>

" CoC menubar color
hi CocMenuSel ctermbg=darkgrey ctermfg=yellow
hi CocSearch ctermfg=blue


" Telescope mappings
nnoremap <silent><leader>f. <cmd>Telescope resume<cr>
nnoremap <silent><leader>f/ <cmd>Telescope current_buffer_fuzzy_find<cr>
nnoremap <silent><leader>ff <cmd>Telescope find_files<cr>
nnoremap <silent><leader>fF <cmd>Telescope grep_string search="" only_sort_text=true<cr>
nnoremap <silent><C-p> <cmd>Telescope find_files<cr>
nnoremap <silent><leader>fg <cmd>Telescope live_grep<cr>
nnoremap <silent><leader>fG <cmd>Telescope grep_string<cr>
nnoremap <silent><leader>fb <cmd>Telescope buffers<cr>
nnoremap <silent><leader>fh <cmd>Telescope help_tags<cr>
nnoremap <silent><leader>fr <cmd>Telescope registers<cr>
nnoremap <silent><leader>fm <cmd>Telescope marks<cr>
nnoremap <silent><leader>fo <cmd>Telescope coc document_symbols<cr>
nnoremap <silent><leader>fs <cmd>Telescope coc workspace_symbols<cr>
nnoremap <silent><leader>fq <cmd>Telescope coc workspace_symbols<cr>

lua << END
require('lualine').setup({
  options = {
    icons_enabled = true,
    theme = 'codedark',
    component_separators = { left = '', right = ''},
    section_separators = { left = '', right = ''},
    disabled_filetypes = {
      statusline = {},
      winbar = {},
    },
    ignore_focus = {},
    always_divide_middle = true,
    globalstatus = false,
    refresh = {
      statusline = 1000,
      tabline = 1000,
      winbar = 1000,
    }
  },
  sections = {
    lualine_a = {'mode'},
    lualine_b = {'branch', 'diff', 'diagnostics'},
    lualine_c = {{'filename', path=1, shorting_target = 39}},
    lualine_x = {'encoding', 'fileformat', 'filetype'},
    lualine_y = {'progress'},
    lualine_z = {'location'}
  },
  inactive_sections = {
    lualine_a = {},
    lualine_b = {},
    lualine_c = {'filename'},
    lualine_x = {'location'},
    lualine_y = {},
    lualine_z = {}
  },
  tabline = {},
  winbar = {},
  inactive_winbar = {},
  extensions = {}
})

require('Comment').setup()

require("telescope").setup({
  defaults = {
    mappings = {
      i = {
        ["<C-b>"] = "preview_scrolling_up",
        ["<C-f>"] = "preview_scrolling_down",
      },
      n = {
        ["<C-b>"] = "preview_scrolling_up",
        ["<C-f>"] = "preview_scrolling_down",
      },
    },
    layout_strategy = "vertical",
    sorting_strategy = "ascending",
    layout_config = {
        preview_cutoff = 1,
      vertical = { width = 0.8 }
    },
    border = true,
  },
  extensions = {
    coc = {
        -- theme = 'ivy',
        prefer_locations = true, -- always use Telescope locations to preview definitions/declarations/implementations etc
    }
  },
})
require('telescope').load_extension('coc')

require('nvim-treesitter.configs').setup({
  highlight = {
    enable = true,
  },
  additional_vim_regex_highlighting = false,
  textobjects = {
    select = {
      enable = true,
      keymaps = {
        ["af"] = "@function.outer",
        ["if"] = "@function.inner",
        ["ac"] = "@class.outer",
        ["ic"] = "@class.inner",
        ["ib"] = "@block.inner",
        ["ab"] = "@block.outer",
        ["ap"] = "@parameter.outer",
        ["ip"] = "@parameter.inner",
      },
      selection_modes = {
        ['@parameter.outer'] = 'v', -- charwise
        ['@function.outer'] = 'V', -- linewise
        ['@block.outer'] = '<c-v>', -- blockwise
      },
    },
    swap = {
      enable = true,
      swap_next = {
      },
      swap_previous = {
      },
    },
    move = {
      enable = true,
      set_jumps = true,
      goto_next_start = {
        ["]b"] = "@block.outer",
        ["]c"] = { query = "@class.outer", desc = "Next class start" },
        ["]d"] = "@conditional.outer",
        ["]f"] = "@function.outer",
        ["]m"] = "@function.outer",
        ["]p"] = "@parameter.inner",
        ["]s"] = { query = "@scope", query_group = "locals", desc = "Next scope" },
        ["]z"] = { query = "@fold", query_group = "folds", desc = "Next fold" },
      },
      goto_next_end = {
        ["]B"] = "@block.outer",
        ["]F"] = "@function.outer",
        ["]M"] = "@function.outer",
        ["]P"] = "@parameter.outer",
        ["]C"] = "@class.outer",
      },
      goto_previous_start = {
        ["[["] = "@class.outer",
        ["[b"] = "@block.outer",
        ["[c"] = "@class.outer",
        ["[d"] = "@conditional.outer",
        ["[f"] = "@function.outer",
        ["[m"] = "@function.outer",
        ["[p"] = "@parameter.inner",
      },
      goto_previous_end = {
        ["[B"] = "@block.outer",
        ["[C"] = "@class.outer",
        ["[F"] = "@function.outer",
        ["[M"] = "@function.outer",
        ["[P"] = "@parameter.outer",
        ["[]"] = "@class.outer",
      },
      -- Below will go to either the start or the end, whichever is closer.
      -- Use if you want more granular movements
      -- Make it even more gradual by adding multiple queries and regex.
      goto_next = {
      },
      goto_previous = {
      }
    },
  },
})

require('treesitter-context').setup({
  enable = true,
  max_lines = 0,
  min_window_height = 0,
  line_numbers = true,
  multiline_threshold = 20,
  trim_scope = 'outer',
  mode = 'cursor',
  separator = nil,
  zindex = 20,
  on_attach = nil,
})

local wilder = require('wilder')
wilder.setup({
  modes = {':'},
  next_key = '<Tab>',
  previous_key = '<S-Tab>',
  accept_key = '<Down>',
  reject_key = '<Up>',
})
wilder.set_option('renderer',
  wilder.popupmenu_renderer(wilder.popupmenu_border_theme({
    highlighter = wilder.basic_highlighter(),
    highlights = {
      border = 'Normal',
      accent = wilder.make_hl('WilderAccent', 'Pmenu', {{}, {}, {foreground = '#f4468f'}}),
    },
    border = 'rounded',
})))
wilder.set_option('pipeline', { wilder.branch(
  wilder.cmdline_pipeline({
    fuzzy = 2,
  }),
  wilder.python_search_pipeline()),
  })
END

endif
